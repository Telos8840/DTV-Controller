//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RCS.DTV.RZC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DtvRedZoneEntities : DbContext
    {
        public DtvRedZoneEntities()
            : base("name=DtvRedZoneEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CurrentWeek> CurrentWeeks { get; set; }
        public DbSet<DtvGame> DtvGames { get; set; }
        public DbSet<DtvTrioEnginePair> DtvTrioEnginePairs { get; set; }
        public DbSet<GameLocation> GameLocations { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<WeekGameDate> WeekGameDates { get; set; }
        public DbSet<GamePasser> GamePassers { get; set; }
        public DbSet<GameReceiver> GameReceivers { get; set; }
        public DbSet<GameRusher> GameRushers { get; set; }
        public DbSet<Game> Games { get; set; }
    
        public virtual int ClearDb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearDb");
        }
    
        public virtual int DeleteGamePassers(Nullable<int> gameKey)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGamePassers", gameKeyParameter);
        }
    
        public virtual int DeleteGameReceivers(Nullable<int> gameKey)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGameReceivers", gameKeyParameter);
        }
    
        public virtual int DeleteGameRushers(Nullable<int> gameKey)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGameRushers", gameKeyParameter);
        }
    
        public virtual ObjectResult<GetDtvGameInfo_Result> GetDtvGameInfo(Nullable<int> gameNumber)
        {
            var gameNumberParameter = gameNumber.HasValue ?
                new ObjectParameter("GameNumber", gameNumber) :
                new ObjectParameter("GameNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDtvGameInfo_Result>("GetDtvGameInfo", gameNumberParameter);
        }
    
        public virtual int GetGame(string gameDate, string tricodeHome)
        {
            var gameDateParameter = gameDate != null ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(string));
    
            var tricodeHomeParameter = tricodeHome != null ?
                new ObjectParameter("TricodeHome", tricodeHome) :
                new ObjectParameter("TricodeHome", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGame", gameDateParameter, tricodeHomeParameter);
        }
    
        public virtual ObjectResult<GetGamePlayerPassing_Result> GetGamePlayerPassing(Nullable<int> season, string seasonType, Nullable<int> week, string tricode, string jerseyNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGamePlayerPassing_Result>("GetGamePlayerPassing", seasonParameter, seasonTypeParameter, weekParameter, tricodeParameter, jerseyNumberParameter);
        }
    
        public virtual ObjectResult<GetGamePlayerReceiving_Result> GetGamePlayerReceiving(Nullable<int> season, string seasonType, Nullable<int> week, string tricode, string jerseyNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGamePlayerReceiving_Result>("GetGamePlayerReceiving", seasonParameter, seasonTypeParameter, weekParameter, tricodeParameter, jerseyNumberParameter);
        }
    
        public virtual ObjectResult<GetGamePlayerRushing_Result> GetGamePlayerRushing(Nullable<int> season, string seasonType, Nullable<int> week, string tricode, string jerseyNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGamePlayerRushing_Result>("GetGamePlayerRushing", seasonParameter, seasonTypeParameter, weekParameter, tricodeParameter, jerseyNumberParameter);
        }
    
        public virtual int GetGameTopPerformersByTeam(Nullable<int> gameKey, string tricode)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGameTopPerformersByTeam", gameKeyParameter, tricodeParameter);
        }
    
        public virtual ObjectResult<GetWeekPassingLeaders_Result> GetWeekPassingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekPassingLeaders_Result>("GetWeekPassingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    
        public virtual ObjectResult<GetWeekReceivingLeaders_Result> GetWeekReceivingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekReceivingLeaders_Result>("GetWeekReceivingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    
        public virtual ObjectResult<GetWeekRushingLeaders_Result> GetWeekRushingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekRushingLeaders_Result>("GetWeekRushingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    
        public virtual int UpdateGame(Nullable<int> fileSequence, Nullable<int> gameKey, Nullable<int> week, Nullable<int> season, string seasonType, string tricodeHome, string tricodeAway, Nullable<int> scoreHome, Nullable<int> scoreAway, string quarter, string gameClock, string gameDate)
        {
            var fileSequenceParameter = fileSequence.HasValue ?
                new ObjectParameter("FileSequence", fileSequence) :
                new ObjectParameter("FileSequence", typeof(int));
    
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var tricodeHomeParameter = tricodeHome != null ?
                new ObjectParameter("TricodeHome", tricodeHome) :
                new ObjectParameter("TricodeHome", typeof(string));
    
            var tricodeAwayParameter = tricodeAway != null ?
                new ObjectParameter("TricodeAway", tricodeAway) :
                new ObjectParameter("TricodeAway", typeof(string));
    
            var scoreHomeParameter = scoreHome.HasValue ?
                new ObjectParameter("ScoreHome", scoreHome) :
                new ObjectParameter("ScoreHome", typeof(int));
    
            var scoreAwayParameter = scoreAway.HasValue ?
                new ObjectParameter("ScoreAway", scoreAway) :
                new ObjectParameter("ScoreAway", typeof(int));
    
            var quarterParameter = quarter != null ?
                new ObjectParameter("Quarter", quarter) :
                new ObjectParameter("Quarter", typeof(string));
    
            var gameClockParameter = gameClock != null ?
                new ObjectParameter("GameClock", gameClock) :
                new ObjectParameter("GameClock", typeof(string));
    
            var gameDateParameter = gameDate != null ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGame", fileSequenceParameter, gameKeyParameter, weekParameter, seasonParameter, seasonTypeParameter, tricodeHomeParameter, tricodeAwayParameter, scoreHomeParameter, scoreAwayParameter, quarterParameter, gameClockParameter, gameDateParameter);
        }
    
        public virtual int UpdateGamePasser(Nullable<int> gameKey, string tricode, string jerseyNumber, string playerName, Nullable<int> attempts, Nullable<int> completions, string completionPct, Nullable<int> yards, string yardsPerAttempt, Nullable<int> timesSacked, Nullable<int> sackYardsLost, Nullable<int> touchdowns, Nullable<int> @long, Nullable<int> interceptions, string rating, Nullable<int> longestTouchdownPass, string playerID, string statString, string firstName, string lastName, string position)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var attemptsParameter = attempts.HasValue ?
                new ObjectParameter("Attempts", attempts) :
                new ObjectParameter("Attempts", typeof(int));
    
            var completionsParameter = completions.HasValue ?
                new ObjectParameter("Completions", completions) :
                new ObjectParameter("Completions", typeof(int));
    
            var completionPctParameter = completionPct != null ?
                new ObjectParameter("CompletionPct", completionPct) :
                new ObjectParameter("CompletionPct", typeof(string));
    
            var yardsParameter = yards.HasValue ?
                new ObjectParameter("Yards", yards) :
                new ObjectParameter("Yards", typeof(int));
    
            var yardsPerAttemptParameter = yardsPerAttempt != null ?
                new ObjectParameter("YardsPerAttempt", yardsPerAttempt) :
                new ObjectParameter("YardsPerAttempt", typeof(string));
    
            var timesSackedParameter = timesSacked.HasValue ?
                new ObjectParameter("TimesSacked", timesSacked) :
                new ObjectParameter("TimesSacked", typeof(int));
    
            var sackYardsLostParameter = sackYardsLost.HasValue ?
                new ObjectParameter("SackYardsLost", sackYardsLost) :
                new ObjectParameter("SackYardsLost", typeof(int));
    
            var touchdownsParameter = touchdowns.HasValue ?
                new ObjectParameter("Touchdowns", touchdowns) :
                new ObjectParameter("Touchdowns", typeof(int));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(int));
    
            var interceptionsParameter = interceptions.HasValue ?
                new ObjectParameter("Interceptions", interceptions) :
                new ObjectParameter("Interceptions", typeof(int));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var longestTouchdownPassParameter = longestTouchdownPass.HasValue ?
                new ObjectParameter("LongestTouchdownPass", longestTouchdownPass) :
                new ObjectParameter("LongestTouchdownPass", typeof(int));
    
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var statStringParameter = statString != null ?
                new ObjectParameter("StatString", statString) :
                new ObjectParameter("StatString", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGamePasser", gameKeyParameter, tricodeParameter, jerseyNumberParameter, playerNameParameter, attemptsParameter, completionsParameter, completionPctParameter, yardsParameter, yardsPerAttemptParameter, timesSackedParameter, sackYardsLostParameter, touchdownsParameter, longParameter, interceptionsParameter, ratingParameter, longestTouchdownPassParameter, playerIDParameter, statStringParameter, firstNameParameter, lastNameParameter, positionParameter);
        }
    
        public virtual int UpdateGameReceiver(Nullable<int> gameKey, string tricode, string jerseyNumber, string playerName, Nullable<int> receptions, Nullable<int> yards, string average, Nullable<int> @long, Nullable<int> touchdowns, Nullable<int> longestTouchdownReception, Nullable<int> passTarget, Nullable<int> yardsAfterCatch, string playerID, string statString, string firstName, string lastName, string position)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var receptionsParameter = receptions.HasValue ?
                new ObjectParameter("Receptions", receptions) :
                new ObjectParameter("Receptions", typeof(int));
    
            var yardsParameter = yards.HasValue ?
                new ObjectParameter("Yards", yards) :
                new ObjectParameter("Yards", typeof(int));
    
            var averageParameter = average != null ?
                new ObjectParameter("Average", average) :
                new ObjectParameter("Average", typeof(string));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(int));
    
            var touchdownsParameter = touchdowns.HasValue ?
                new ObjectParameter("Touchdowns", touchdowns) :
                new ObjectParameter("Touchdowns", typeof(int));
    
            var longestTouchdownReceptionParameter = longestTouchdownReception.HasValue ?
                new ObjectParameter("LongestTouchdownReception", longestTouchdownReception) :
                new ObjectParameter("LongestTouchdownReception", typeof(int));
    
            var passTargetParameter = passTarget.HasValue ?
                new ObjectParameter("PassTarget", passTarget) :
                new ObjectParameter("PassTarget", typeof(int));
    
            var yardsAfterCatchParameter = yardsAfterCatch.HasValue ?
                new ObjectParameter("YardsAfterCatch", yardsAfterCatch) :
                new ObjectParameter("YardsAfterCatch", typeof(int));
    
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var statStringParameter = statString != null ?
                new ObjectParameter("StatString", statString) :
                new ObjectParameter("StatString", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGameReceiver", gameKeyParameter, tricodeParameter, jerseyNumberParameter, playerNameParameter, receptionsParameter, yardsParameter, averageParameter, longParameter, touchdownsParameter, longestTouchdownReceptionParameter, passTargetParameter, yardsAfterCatchParameter, playerIDParameter, statStringParameter, firstNameParameter, lastNameParameter, positionParameter);
        }
    
        public virtual int UpdateGameRusher(Nullable<int> gameKey, string tricode, string jerseyNumber, string playerName, Nullable<int> attempts, Nullable<int> yards, string average, Nullable<int> @long, Nullable<int> touchdowns, Nullable<int> longestTouchdownRush, string playerID, string statString, string firstName, string lastName, string position)
        {
            var gameKeyParameter = gameKey.HasValue ?
                new ObjectParameter("GameKey", gameKey) :
                new ObjectParameter("GameKey", typeof(int));
    
            var tricodeParameter = tricode != null ?
                new ObjectParameter("Tricode", tricode) :
                new ObjectParameter("Tricode", typeof(string));
    
            var jerseyNumberParameter = jerseyNumber != null ?
                new ObjectParameter("JerseyNumber", jerseyNumber) :
                new ObjectParameter("JerseyNumber", typeof(string));
    
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var attemptsParameter = attempts.HasValue ?
                new ObjectParameter("Attempts", attempts) :
                new ObjectParameter("Attempts", typeof(int));
    
            var yardsParameter = yards.HasValue ?
                new ObjectParameter("Yards", yards) :
                new ObjectParameter("Yards", typeof(int));
    
            var averageParameter = average != null ?
                new ObjectParameter("Average", average) :
                new ObjectParameter("Average", typeof(string));
    
            var longParameter = @long.HasValue ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(int));
    
            var touchdownsParameter = touchdowns.HasValue ?
                new ObjectParameter("Touchdowns", touchdowns) :
                new ObjectParameter("Touchdowns", typeof(int));
    
            var longestTouchdownRushParameter = longestTouchdownRush.HasValue ?
                new ObjectParameter("LongestTouchdownRush", longestTouchdownRush) :
                new ObjectParameter("LongestTouchdownRush", typeof(int));
    
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var statStringParameter = statString != null ?
                new ObjectParameter("StatString", statString) :
                new ObjectParameter("StatString", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGameRusher", gameKeyParameter, tricodeParameter, jerseyNumberParameter, playerNameParameter, attemptsParameter, yardsParameter, averageParameter, longParameter, touchdownsParameter, longestTouchdownRushParameter, playerIDParameter, statStringParameter, firstNameParameter, lastNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<GetWeekFantasyPassingLeaders_Result> GetWeekFantasyPassingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekFantasyPassingLeaders_Result>("GetWeekFantasyPassingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    
        public virtual ObjectResult<GetWeekFantasyReceivingLeaders_Result> GetWeekFantasyReceivingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekFantasyReceivingLeaders_Result>("GetWeekFantasyReceivingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    
        public virtual ObjectResult<GetWeekFantasyRushingLeaders_Result> GetWeekFantasyRushingLeaders(Nullable<int> season, string seasonType, Nullable<int> week)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var seasonTypeParameter = seasonType != null ?
                new ObjectParameter("SeasonType", seasonType) :
                new ObjectParameter("SeasonType", typeof(string));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekFantasyRushingLeaders_Result>("GetWeekFantasyRushingLeaders", seasonParameter, seasonTypeParameter, weekParameter);
        }
    }
}
